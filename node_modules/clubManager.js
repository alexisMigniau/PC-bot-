/***********************************
* PC[bot] > Gestionnaire des clubs *
***********************************/

// Constante
const prefixOfOptions = '~';
const errorSignature = `Votre commande est mal formé!`;
const acceptRole = /^[a-z\u00E0-\u00FC]+$/;
const permitAdd = 'mkTags';

exports.manage = ( args , data ) => {
	if(args.length == 0) return " Erreur, la fonction attend des arguments, pour connaitre son fonctionnement check l'aide ! ";
	
	let mode;
	if( args[0].startsWith( prefixOfOptions ) ) {
		mode = args.shift().slice( prefixOfOptions.length );
	} else
		mode = 'add';
	
	let reponse;
	switch( mode ) {
		case 'add':
		case 'join':
			reponse = [];
			for(let element of args) {
				if(element.match(acceptRole)) {
					let target = data.guild.roles.cache.find( x => (x.name === element) );
					if( target ) {
						if( data.member.roles.cache.has( target.id ) )
							reponse.push(`Vous avez déjà le rôle ${ element }`);
						else {
							data.member.roles.add( target );			
							reponse.push(`Rôle correctement ajouter: ${ element }`);				
						}
					} else
						reponse.push(`Rôle inconnnu(${ element }), demander à un modérateur si vous souhaitez l'ajouter!`);
				} else
					reponse.push(`Rôle incorrect: ${element}`);
			}
			return reponse.join('\n');
		break;
		
		case 'rm':
		case 'remove':
		case 'leave':
			reponse = [];
			for(let element of args) {
				if(element.match(acceptRole)) {
					let target = data.guild.roles.cache.find( x => (x.name === element) );
					if( target ) {
						if( data.member.roles.cache.has(target.id) ) {
							data.member.roles.remove( target );
							reponse.push(`Rôle correctement retirer: ${ element }`);
						} else
							reponse.push(`Vous n'avez pas le rôle ${ element }, je ne peut donc pas vous le retirer`);
					} else
						reponse.push(`Rôle inconnnu(${ element }), demander à un modérateur si vous souhaitez l'ajouter!`);
				} else
					reponse.push(`Rôle incorrect: ${element}`);
			}
			return reponse.join('\n');
		break;
		
		case 'ls':
		case 'list':
			return 'Voici la liste des clubs actuels: \n'+Array.from(data.guild.roles.cache.values()).map( ele => ele.name ).filter( ele => ele.match( acceptRole ) ).join('\n');			
		break;
		
		case 'create':
		case 'new':
			reponse = [];
			if( data.member.roles.cache.has( data.guild.roles.cache.find( x => (x.name == permitAdd) ).id ) ) {
				let buffer = Array.from(data.guild.roles.cache.values()).map( ele => ele.name );
				for(let element of args) {
					if(buffer.indexOf(element) != -1) {
						reponse.push(`Rôle déjà existant: ${element}`);
					} else if(element.match(acceptRole)) {
						data.guild.roles.create(
							{
							  data: {
								name: element,
								mentionable: true
							  },
							  reason: `Créé par : ${ data.author }`,
							}
						);
						reponse.push(`Rôle créer: ${ element }`);
					} else
						reponse.push(`Rôle incorrect: ${element}`);
				}
			} else
				reponse.push(`Erreur vous n'avez pas les permissions requises!`);
			return reponse.join('\n');
		break;
		
		default:
			return 'mode inconnu';
	}
};

